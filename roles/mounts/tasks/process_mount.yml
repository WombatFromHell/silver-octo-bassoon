- name: Process .mount/.automount files
  tags: [core, mounts, mounts_automount]
  become: true
  block:
    - name: "Create temporary working directory on target"
      ansible.builtin.file:
        path: "/tmp/ansible_mounts_{{ ansible_date_time.epoch }}"
        state: directory
        mode: "0700"
      register: temp_working_dir
      check_mode: false

    - name: "Determine corresponding automount file for '{{ mount_item.path | basename }}'"
      ansible.builtin.set_fact:
        automount_file: "{{ role_path }}/files/{{ mount_item.path | basename | regex_replace('.mount$', '.automount') }}"
        temp_mount_file: "{{ temp_working_dir.path }}/{{ mount_item.path | basename }}"
        temp_automount_file: "{{ temp_working_dir.path }}/{{ mount_item.path | basename | regex_replace('.mount$', '.automount') }}"

    - name: "Check if automount file exists for '{{ mount_item.path | basename }}'"
      ansible.builtin.stat:
        path: "{{ automount_file }}"
      register: automount_stat
      changed_when: false

    - name: "Copy mount file '{{ mount_item.path | basename }}' to target temp location"
      ansible.builtin.copy:
        src: "{{ mount_item.path }}"
        dest: "{{ temp_mount_file }}"
        mode: "0644"
      check_mode: false
      when: not ansible_check_mode
      register: mount_file_copied

    - name: "SIMULATE: Would copy mount file '{{ mount_item.path | basename }}' to {{ temp_mount_file }}"
      ansible.builtin.debug:
        msg: "Would copy mount unit '{{ mount_item.path | basename }}' to temporary location {{ temp_mount_file }}"
      when: ansible_check_mode

    - name: "Copy automount file '{{ mount_item.path | basename | regex_replace('.mount$', '.automount') }}' to target temp location"
      ansible.builtin.copy:
        src: "{{ automount_file }}"
        dest: "{{ temp_automount_file }}"
        mode: "0644"
      when:
        - automount_stat.stat.exists
        - not ansible_check_mode
      check_mode: false
      register: automount_file_copied

    - name: "SIMULATE: Would copy automount file '{{ mount_item.path | basename | regex_replace('.mount$', '.automount') }}' to {{ temp_automount_file }}"
      ansible.builtin.debug:
        msg: "Would copy automount unit
          '{{ mount_item.path | basename | regex_replace('.mount$', '.automount') }}'
          to temporary location {{ temp_automount_file }}"
      when:
        - automount_stat.stat.exists
        - ansible_check_mode

    - name: "Extract What= value from '{{ mount_item.path | basename }}'"
      ansible.builtin.shell: "grep -oP '^What=\\K.*' '{{ mount_item.path }}'"
      register: mount_what
      changed_when: false
      when: ansible_check_mode or (not ansible_check_mode and mount_file_copied is defined)

    - name: "Skip device check for network URI in '{{ mount_item.path | basename }}'"
      ansible.builtin.debug:
        msg: "Skipping device check for '{{ mount_item.path | basename }}' as What= is a network URI ({{ mount_what.stdout }})"
      when:
        - mount_what.stdout is defined
        - mount_what.stdout.startswith('//')
      register: skip_device_check

    - name: "Check if device exists locally for '{{ mount_item.path | basename }}'"
      ansible.builtin.stat:
        path: "{{ mount_what.stdout }}"
      register: device_stat
      when:
        - mount_what.stdout is defined
        - not mount_what.stdout.startswith('//')
        - not skip_device_check is defined

    - name: "Validate device for '{{ mount_item.path | basename }}'"
      ansible.builtin.fail:
        msg: "Device '{{ mount_what.stdout }}' specified in '{{ mount_item.path | basename }}' does not exist"
      when:
        - mount_what.stdout is defined
        - not mount_what.stdout.startswith('//')
        - not skip_device_check is defined
        - device_stat is defined
        - not device_stat.stat.exists

    - name: "Extract Where= path from '{{ mount_item.path | basename }}'"
      ansible.builtin.shell: "grep -oP '^Where=\\K.*' '{{ mount_item.path }}'"
      register: mount_where
      changed_when: false
      when: ansible_check_mode or (not ansible_check_mode and mount_file_copied is defined)

    - name: "Extract Where= path from automount file for '{{ mount_item.path | basename }}'"
      ansible.builtin.shell: "grep -oP '^Where=\\K.*' '{{ automount_file }}'"
      register: automount_where
      changed_when: false
      when:
        - automount_stat.stat.exists
        - ansible_check_mode or (not ansible_check_mode and automount_file_copied is defined)

    - name: "Determine new paths and filenames for Bazzite"
      ansible.builtin.set_fact:
        new_where: "/var{{ mount_where.stdout }}"
        new_mount_filename: "var-{{ mount_item.path | basename }}"
        new_automount_filename: "var-{{ mount_item.path | basename | regex_replace('.mount$', '.automount') }}"
      when: ansible_facts.lsb.id == 'Bazzite'

    - name: "Set non-Bazzite filenames"
      ansible.builtin.set_fact:
        new_where: "{{ mount_where.stdout }}"
        new_mount_filename: "{{ mount_item.path | basename }}"
        new_automount_filename: "{{ mount_item.path | basename | regex_replace('.mount$', '.automount') }}"
      when: ansible_facts.lsb.id != 'Bazzite'

    - name: "SIMULATE: Would modify mount file '{{ mount_item.path | basename }}' for Bazzite"
      ansible.builtin.debug:
        msg: "Would modify mount unit '{{ new_mount_filename }}' to use path '{{ new_where }}' (original: {{ mount_where.stdout }})"
      when:
        - ansible_facts.lsb.id == 'Bazzite'
        - ansible_check_mode
        - mount_where.stdout is defined

    - name: "Modify mount file '{{ mount_item.path | basename }}' for Bazzite"
      ansible.builtin.replace:
        path: "{{ temp_mount_file }}"
        regexp: "^Where=.*"
        replace: "Where={{ new_where }}"
      when:
        - ansible_facts.lsb.id == 'Bazzite'
        - not ansible_check_mode
        - mount_file_copied is defined

    - name: "SIMULATE: Would modify automount file '{{ mount_item.path | basename | regex_replace('.mount$', '.automount') }}' for Bazzite"
      ansible.builtin.debug:
        msg: "Would modify automount unit '{{ new_automount_filename }}' to use path '{{ new_where }}' (original: {{ automount_where.stdout }})"
      when:
        - ansible_facts.lsb.id == 'Bazzite'
        - automount_stat.stat.exists
        - ansible_check_mode
        - automount_where.stdout is defined

    - name: "Modify automount file '{{ mount_item.path | basename | regex_replace('.mount$', '.automount') }}' for Bazzite"
      ansible.builtin.replace:
        path: "{{ temp_automount_file }}"
        regexp: "^Where=.*"
        replace: "Where={{ new_where }}"
      when:
        - ansible_facts.lsb.id == 'Bazzite'
        - automount_stat.stat.exists
        - not ansible_check_mode
        - automount_file_copied is defined

    - name: "SIMULATE: Would install mount unit '{{ new_mount_filename }}'"
      ansible.builtin.debug:
        msg: "Would install mount unit '{{ new_mount_filename }}' to /etc/systemd/system/ with path '{{ new_where }}'"
      when: ansible_check_mode

    - name: "Install mount unit '{{ new_mount_filename }}'"
      ansible.builtin.copy:
        src: "{{ temp_mount_file }}"
        dest: "/etc/systemd/system/{{ new_mount_filename }}"
        mode: "0644"
        remote_src: true
      when: not ansible_check_mode
      register: mount_file_installed

    - name: "SIMULATE: Would install automount unit '{{ new_automount_filename }}'"
      ansible.builtin.debug:
        msg: "Would install automount unit '{{ new_automount_filename }}' to /etc/systemd/system/ with path '{{ new_where }}'"
      when:
        - automount_stat.stat.exists
        - ansible_check_mode

    - name: "Install automount unit '{{ new_automount_filename }}'"
      ansible.builtin.copy:
        src: "{{ temp_automount_file }}"
        dest: "/etc/systemd/system/{{ new_automount_filename }}"
        mode: "0644"
        remote_src: true
      when:
        - automount_stat.stat.exists
        - not ansible_check_mode
      register: automount_file_installed

    - name: "SIMULATE: Would reload systemd for '{{ new_mount_filename }}' and '{{ new_automount_filename }}'"
      ansible.builtin.debug:
        msg: "Would reload systemd for units: {{ new_mount_filename }} {% if automount_stat.stat.exists %}{{ new_automount_filename }}{% endif %}"
      when: ansible_check_mode

    - name: "Reload systemd for '{{ new_mount_filename }}' and '{{ new_automount_filename }}'"
      ansible.builtin.systemd:
        daemon_reload: true
      when: not ansible_check_mode

    - name: "SIMULATE: Would enable automount unit '{{ new_automount_filename }}'"
      ansible.builtin.debug:
        msg: "Would enable and start automount unit '{{ new_automount_filename }}' for mount point '{{ new_where }}'"
      when:
        - new_automount_filename is defined
        - automount_stat.stat.exists
        - ansible_check_mode

    - name: "Enable automount unit '{{ new_automount_filename }}'"
      ansible.builtin.systemd:
        name: "{{ new_automount_filename }}"
        enabled: true
        state: started
      when:
        - new_automount_filename is defined
        - automount_stat.stat.exists
        - not ansible_check_mode

    - name: "SIMULATE: Would clean up temporary files for '{{ mount_item.path | basename }}'"
      ansible.builtin.debug:
        msg: "Would remove temporary files for '{{ mount_item.path | basename }}' in {{ temp_working_dir.path }}"
      when: ansible_check_mode

    - name: "Clean up temporary files for '{{ mount_item.path | basename }}'"
      ansible.builtin.file:
        path: "{{ temp_working_dir.path }}"
        state: absent
      when: not ansible_check_mode
